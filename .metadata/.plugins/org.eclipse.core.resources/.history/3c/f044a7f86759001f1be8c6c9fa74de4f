package com.aurionpro.operation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.aurionpro.model.TransactionView;

public class TransactionViewOperation {
    private Connection connection;

    public TransactionViewOperation(Connection connection) {
        this.connection = connection;
    }

    // Method to fetch all transaction views
    public List<TransactionView> fetchAllTransactionViews() {
        List<TransactionView> transactionViews = new ArrayList<>();
        String query = "SELECT t.transaction_id, t.sender_accno, t.reciver_accno, tt.transactionType_name, t.amount, t.date " +
                       "FROM transactions t " +
                       "JOIN transaction_types tt ON t.transactionType_id = tt.transactionType_id "+
                        "ORDER BY t.transaction_id";
        
        
        
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            ResultSet resultSet = statement.executeQuery();
            
            while (resultSet.next()) {
                int transactionId = resultSet.getInt("transaction_id");
                long senderAccount = resultSet.getLong("sender_accno");
                long receiverAccount = resultSet.getLong("reciver_accno");
                String typeOfTransaction = resultSet.getString("transactionType_name");
                double amount = resultSet.getDouble("amount");
                Date transactionDate = resultSet.getDate("date");
                
                TransactionView transactionView = new TransactionView(transactionId, senderAccount, receiverAccount, typeOfTransaction, amount, transactionDate);
                transactionViews.add(transactionView);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return transactionViews;
    }

    // Method to fetch transactions based on a given account number
    public List<TransactionView> fetchTransactionsByAccountNumber(long accountNumber) {
        List<TransactionView> transactionViews = new ArrayList<>();
        String query = "SELECT t.transaction_id, t.sender_accno, t.reciver_accno, tt.transactionType_name, t.amount, t.date " +
                       "FROM transactions t " +
                       "JOIN transaction_types tt ON t.transactionType_id = tt.transactionType_id " +
                       "WHERE  t.sender_accno = ? OR t.reciver_accno = ? "+ 
                       "ORDER BY t.transaction_id";
        
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setLong(1, accountNumber);
            statement.setLong(2, accountNumber);
            ResultSet resultSet = statement.executeQuery();
            
            while (resultSet.next()) {
                int transactionId = resultSet.getInt("transaction_id");
                long senderAccount = resultSet.getLong("sender_accno");
                long receiverAccount = resultSet.getLong("reciver_accno");
                String type=resultSet.getString("transactionType_name");
                if(resultSet.getString("transactionType_name").equalsIgnoreCase("Transfer")) {
                	if(senderAccount==accountNumber) {
                		type = "Debit";
                	}
                }else {
                	type = "Credit";
                }
                String typeOfTransaction = resultSet.getString("transactionType_name");
                double amount = resultSet.getDouble("amount");
                Date transactionDate = resultSet.getDate("date");
                
                TransactionView transactionView = new TransactionView(transactionId, senderAccount, receiverAccount, typeOfTransaction, amount, transactionDate);
                transactionViews.add(transactionView);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return transactionViews;
    }
}
